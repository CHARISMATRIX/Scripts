--SMAGARD ADMIN BY SMAGARD

local prefix = "+"

local commands = {}

local S = {
	Players = game:GetService("Players"),
	Workspace = game:GetService("Workspace"),
	ReplicatedStorage = game:GetService("ReplicatedStorage"),
	RunService = game:GetService("RunService"),
	UserInputService = game:GetService("UserInputService"),
	TeleportService = game:GetService("TeleportService"),
	TweenService = game:GetService("TweenService")
}

local plr = S.Players.LocalPlayer
local mouse = plr:GetMouse()

local BodyPartNames = {
	"HumanoidRootPart",
	"Humanoid",
	"Head"
	--Add More
}

local BPs = {}

function resignvars()
	char = plr.Character
	for i,v in ipairs(BodyPartNames) do
		if not char:FindFirstChild(v) then continue end

		BPs[v] = char:FindFirstChild(v)

	end
end

resignvars()

plr.CharacterAdded:Connect(function ()
	repeat wait() until plr.Character
	resignvars()
end)

--Script Here
local CommandList = {}

local spamming = {}

local settings = {

	infinitejump = false,
	NotificationsEnabled = true,
	savedPosition = CFrame.new(0,0,0),
	destroyed = false

}

local chatevent
local focuslostevent
local uisscript
local jumprequestevent

--CMDBAR
local SMAdmin = Instance.new("ScreenGui")
local CMDBar = Instance.new("Frame")
local Command = Instance.new("TextBox")
local TextLabel = Instance.new("TextLabel")
local Files = Instance.new("Folder")

--Properties:

SMAdmin.Name = "SMAdmin"
SMAdmin.ResetOnSpawn = false
SMAdmin.Parent = plr:WaitForChild("PlayerGui")
SMAdmin.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

CMDBar.Parent = SMAdmin
CMDBar.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
CMDBar.BackgroundTransparency = 0.100
CMDBar.BorderColor3 = Color3.fromRGB(0, 255, 0)
CMDBar.BorderSizePixel = 5
CMDBar.Position = UDim2.new(0.0103359176, 0, 0.943890274, 0)
CMDBar.Size = UDim2.new(0, 320, 0, 45)

Command.Name = "Command"
Command.Parent = CMDBar
Command.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Command.BackgroundTransparency = 1.000
Command.BorderSizePixel = 0
Command.Position = UDim2.new(0.0187500007, 0, 0, 0)
Command.Size = UDim2.new(0.959375024, 0, 1, 0)
Command.Font = Enum.Font.SourceSansBold
Command.PlaceholderText = "Command"
Command.Text = ""
Command.TextColor3 = Color3.fromRGB(255, 0, 4)
Command.TextSize = 20.000
Command.TextWrapped = true
Command.TextXAlignment = Enum.TextXAlignment.Left
Command.ClearTextOnFocus = false

TextLabel.Parent = CMDBar
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderSizePixel = 0
TextLabel.Position = UDim2.new(0, 0, -0.75555557, 0)
TextLabel.Size = UDim2.new(0, 136, 0, 34)
TextLabel.Font = Enum.Font.SourceSansBold
TextLabel.Text = "SM Admin"
TextLabel.TextColor3 = Color3.fromRGB(13, 255, 0)
TextLabel.TextScaled = true
TextLabel.TextSize = 14.000
TextLabel.TextWrapped = true

Files.Name = "SM Files"
Files.Parent = S.Workspace

function Notify(MSGTitle, MSGText)
	if settings.NotificationsEnabled then
		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = MSGTitle;
			Text = MSGText;
		})	
	end
end

Notify("Loaded SM Admin", "Loaded")

function AddCommand(name, description, aliases, func, undofunc)
	name = string.lower(name)
	commands[name] = func
	local e = ""

	for i,v in aliases do
		e = "|"..string.lower(v)..e
		commands[string.lower(v)] = func
	end

	if undofunc then
		commands["un"..name] = undofunc
		for i,v in aliases do
			commands[string.lower("un"..v)] = undofunc
		end
		CommandList["(un)"..name..e] = description
	else
		CommandList[name..e] = description
	end
end

function GetPlayer(name)
	name = string.lower(name)
	if name == "me" or name == "" or name == " " or not name then
		return plr

	elseif name == "random" then
		return S.Players:GetPlayers()[math.random(1, #S.Players:GetPlayers())]

	else
		for i,v in pairs(S.Players:GetPlayers()) do
			if v.Name:lower():sub(1, #name) == name then
				return v
			end
		end
	end

	return nil
end

function CreateFile(name, filetype, Notification)
	local newFile = Instance.new(filetype)
	newFile.Name = name
	newFile.Parent = Files
	print("SMAGARD-ADMIN: Created File, "..name.." which is a, "..filetype)
	if Notification then
		Notify("File Creation", "Created File, "..name)
	end
end

function GetFile(str)
	if Files:FindFirstChild(str) then
		return Files[str]
	else
		return nil
	end
end

function RemoveFile(name, Notification)
	if GetFile(name) then
		GetFile(name):Destroy()
		print("SMAGARD-ADMIN: Removed File, "..name)
		if Notification then
			Notify("File Deletion", "Removed File, "..name)
		end
	else
		if Notification then
			Notify("File Deletion", "File "..name..", does not exist")
		end
	end
end

function CF(pos)
	if not char then return end
	if pos then
		BPs.HumanoidRootPart.CFrame = pos
	else
		return BPs.HumanoidRootPart.CFrame
	end
end

function execcommand(message)
	pcall(function()
		local args = message:split(" ")

		local prefixcmd = args[1]
		local cmd = string.lower(prefixcmd:split(prefix)[2])

		if commands[cmd] then

			local commandargs = {}

			for i = 2, #args, 1 do --Put arguments in commandargs table
				table.insert(commandargs, args[i])
			end

			pcall(commands[cmd](commandargs)) --Call function while sending all the other arguments
		else
			Notify("CommandError", "Unknown Command: "..cmd..", use +cmds to see a list of commands!")
		end

	end)
end

AddCommand("commands", "Shows a list of all commands", {"cmds"}, function(args)
	print("--------------------------------\nCOMMANDS: \n\nDOCUMENTAITON:\n() = Optional,\n| = Or\n\n\n")
	for i,v in CommandList do
		print(prefix..i..":  "..v)
	end
	print("\n\n\n--------------------------------")
	Notify("CMDS", "Commands were printed in the console")
end)

AddCommand("iy", "Loads Infinite Yield", {}, function(args)
	loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
	Notify("Infinite Yield", "Loaded Infinite Yield")
end)

AddCommand("remotespy", "Loads SimpleSpy", {"rspy"}, function(args)
	loadstring(game:HttpGet("https://github.com/exxtremestuffs/SimpleSpySource/raw/master/SimpleSpy.lua"))()
	Notify("RSpy", "Loaded SimpleSpy")
end)

AddCommand("smhub", "Loads SMAGARD Hub", {}, function(args)
	loadstring(game:HttpGet('https://github.com/CHARISMATRIX/Scripts/edit/main/SMAGARD-HUB'))()
	Notify("SMAGARD Hub", "Loaded SMAGARD Hub")
end)

AddCommand("rejoin", "Rejoins the game", {"rj"}, function(args)
	Notify("REJOIN", "Rejoining The Game")
	S.TeleportService:Teleport(game.PlaceId, plr)
end)

AddCommand("reset", "Resets your character", {}, function(args)
	char:BreakJoints()
	Notify("Reset", "Character resetted")
end)

AddCommand("walkspeed", "Changes your walkspeed", {"speed", "ws"}, function(args)
	BPs.Humanoid.WalkSpeed = tonumber(args[1])
	Notify("WalkSpeed", "Changed WalkSpeed to: "..args[1])
end)

AddCommand("jumppower", "Changes your jumppower", {"jp"}, function(args)
	BPs.Humanoid.JumpPower = tonumber(args[1])
	Notify("JumpPower", "Changed JumpPower to: "..args[1])
end)

AddCommand("goto", "Teleports you to another player", {"to"}, function(args)
	local target = GetPlayer(args[1])
	CF(target.Character.HumanoidRootPart.CFrame)
	Notify("Teleport", "Teleported to: "..target.Name)
end)

AddCommand("view", "Views another players camera", {}, function(args)
	local target = GetPlayer(args)
	S.Workspace.CurrentCamera.CameraSubject = target.Character.Humanoid		
	Notify("View", "Now viewing: "..target.Name)
end, function(args)
	Notify("UnView", "Stopped Viewing: "..S.Workspace.CurrentCamera.CameraSubject.Parent.Name)
	S.Workspace.CurrentCamera.CameraSubject = BPs.Humanoid
end)

AddCommand("maxzoom", "Sets Max Zoom Distance", {}, function(args)
	plr.CameraMaxZoomDistance = tonumber(args[2])
	Notify("MaxZoom", "Set CameraMaxZoomDistance to: "..tonumber(args[2]))
end)

AddCommand("tptool", "Gives you a teleportation tool", {}, function(args)
	local tool = Instance.new("Tool")
	tool.RequiresHandle = false
	tool.Name = "Click Teleport"
	tool.Activated:connect(function()
		local pos = mouse.Hit * CFrame.new(0,2.5,0)
		CF(pos)
	end)
	tool.Parent = plr.Backpack
	Notify("TPTool", "Gave tptool")
end)

AddCommand("loop", "Loops a specified command", {"spam"}, function(args)
	table.insert(spamming, table.concat(args, " "))
	Notify("Spam", "Started Looping Command: "..args[2])
end, function(args)
	table.clear(spamming)
	Notify("UnSpam", "Stopped All Loops")
end)

AddCommand("notify", "Enables/Disables Notifications", {}, function(args)
	settings.NotificationsEnabled = true
	Notify("Notify", "Enabled Notifications")
end, function(args)
	Notify("UnNotify", "Disabled Notifications")
	settings.NotificationsEnabled = false
end)

AddCommand("infinitejump", "Enables/Disables infinite jumping", {}, function(args)
	settings.infinitejump = true
	Notify("Enabled InfiniteJump")
end, function(args)
	settings.infinitejump = false
	Notify("Disabled InfiniteJump")
end)

AddCommand("cbring", "Brings another player [CLIENT]", {}, function(args)
	local target = GetPlayer(args[2])
	local direction = BPs.HumanoidRootPart.CFrame.lookVector
	local position = BPs.HumanoidRootPart.CFrame.p + direction * 5
	target.Character.HumanoidRootPart.CFrame = CFrame.new(position)
end)

AddCommand("freeze", "Freezes a player [CLIENT]", {}, function(args)
	local target = GetPlayer(args)

	for i,v in pairs(target.Character:GetDescendants()) do
		if v:IsA("BasePart") then
			v.Anchored = true
		end
	end
	Notify("Freeze", "Freezed Player: "..target.Name)
end, function(args)
	local target = GetPlayer(args)
	for i,v in pairs(target.Character:GetDescendants()) do
		if v:IsA("BasePart") then
			v.Anchored = false
		end
	end
	Notify("UnFreeze", "Un Freezed Player: "..target.Name)
end)

AddCommand("saveposition", "Saves your current position", {"savepos", "spos"}, function(args)
	settings.savedPosition = CF()
	Notify("SavePostition", "Saved your current position")
end)

AddCommand("loadposition", "Loads your saved position", {"loadpos", "lpos"}, function(args)
	CF(settings.savedPosition)
	Notify("LoadPosition", "Loaded your saved position")
end)

AddCommand("float", "Creates a plattform under you", {"plattform", "pf"}, function(args)
	if GetFile("Plattform") then return end
	CreateFile("Plattform", "Part", true)
	GetFile("Plattform").Anchored = true
	GetFile("Plattform").Size = Vector3.new(2,0.2,1.5)
	GetFile("Plattform").Transparency = 1
	task.spawn(function()
		while GetFile("Plattform") do
			task.wait()
			GetFile("Plattform").CFrame = CF() * CFrame.new(0,-3.1,0)
		end
	end)
end, function(args)
	RemoveFile("Plattform", true)
end)

AddCommand("music", "Plays a looped sound id", {}, function(args)
	if not GetFile("Music") then CreateFile("Music", "Sound", true) end
	GetFile("Music").SoundId = "rbxassetid://"..args[2]
	GetFile("Music").TimePosition = 0
	GetFile("Music").Volume = 3
	GetFile("Music").Looped = true
	GetFile("Music").Playing = true
end, function(args)
	RemoveFile("Music", true)
end)

AddCommand("hitbox", "Changes another players humanoidrootpart size", {}, function(args)
	local target = GetPlayer(args[2])
	target.Character["HumanoidRootPart"].Size = Vector3.new(tonumber(args[3]),tonumber(args[3]),tonumber(args[3]))
	target.Character["HumanoidRootPart"].Transparency = 0.4
end)

AddCommand("all", "Executes a command for everyone", {}, function(args)
	local a3 = ""
	if args[3] then
		a3 = args[3]
	end
	for i,v in pairs(S.Players:GetPlayers()) do
		execcommand(prefix..args[1]..v.Name..a3)
	end
end)

AddCommand("others", "Executes a command for everyone but you", {}, function(args)
	local a3 = ""
	if args[3] then
		a3 = args[3]
	end
	for i,v in pairs(S.Players:GetPlayers()) do
		if v == plr then continue end
		execcommand(prefix..args[1]..v.Name..a3)
	end
end)

AddCommand("destroy", "Destroys the whole gui", {}, function(args)
	chatevent:Disconnect()
	focuslostevent:Disconnect()
	uisscript:Disconnect()
	jumprequestevent:Disconnect()
	SMAdmin:Destroy()
	Files:Destroy()
end)


task.spawn(function()
	while not settings.destroyed do
		task.wait()
		for i,v in ipairs(spamming) do
			pcall(function()
				if settings.NotificationsEnabled then
					settings.NotificationsEnabled = false
					execcommand(prefix..v)
					settings.NotificationsEnabled = true
				else
					execcommand(prefix..v)
				end
			end)
		end
	end
end)


chatevent = plr.Chatted:Connect(function(msg)
	msg = msg:lower()
	if string.sub(msg,1,3) == "/e " then
		msg = string.sub(msg, 4)
	end
	if string.sub(msg, 1,1) == prefix then
		execcommand(msg)
	end
end)

focuslostevent = Command.FocusLost:Connect(function(enterPressed)
	if enterPressed then

		if string.sub(Command.Text, 1,1) == prefix then
			execcommand(Command.Text)
			Command.Text = ""
		else
			execcommand(prefix..Command.Text)
			Command.Text = ""
		end

	end
end)

uisscript = S.UserInputService.InputBegan:Connect(function(input, gp)
	if  gp then return end

	local key = input.KeyCode

	if key == Enum.KeyCode.Semicolon then
		Command:CaptureFocus()

	end
end)

jumprequestevent = S.UserInputService.JumpRequest:Connect(function()
	if settings.infinitejump then
		BPs.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	end
end)
